var RtcRoom = (function () {
    function RtcRoom(stream) {
        this._roomId = "74c61bdf-a7bd-4e61-b129-a52e55fab443";
        this._currentId = this._roomId;
        this._peerMap = {};
        this._eventMap = {};
        this._socket = io.connect("http://192.168.1.160:1239/");
        this._localStream = stream;
        var self = this;
        this._socket.on('msg', function (data) {
            self.handleMessages(data);
        });
        this._socket.on('peer.connected', function (data) {
            self.makeOfferFor(data.id);
        });
        this._socket.on('peer.disconnected', function (data) {
            console.log("peer aborted");
        });
    }
    RtcRoom.prototype.getPeerConnection = function (id) {
        if (this._peerMap[id]) {
            return this._peerMap[id];
        }
        var pc = new RTCPeerConnection(RtcRoom.ICE_CONFIG);
        this._peerMap[id] = pc;
        var self = this;
        pc.addStream(this._localStream);
        pc.onicecandidate = function (evnt) {
            console.log("ICE candidate recieved... broadcasting request");
            self._socket.emit('msg', { by: self._currentId, to: id, ice: evnt.candidate, type: 'ice' });
        };
        pc.onaddstream = function (event) {
            console.log("Got new stream.. inform UI?");
            self.trigger('newstream', event);
        };
        pc.onremovestream = function (event) {
            console.log("Stream lost");
        };
        return pc;
    };
    RtcRoom.prototype.makeOfferFor = function (id) {
        var _this = this;
        var peer = this.getPeerConnection(id);
        peer.createOffer(function (description) {
            peer.setLocalDescription(description);
            console.log("Creating offer for Peer... ID: " + id);
            _this._socket.emit('msg', { by: _this._currentId, to: id, sdp: description, type: 'sdp-offer' });
        });
    };
    RtcRoom.prototype.handleMessages = function (messageData) {
        var peer = this.getPeerConnection(messageData.by);
        var self = this;
        switch (messageData.type) {
            case 'sdp-offer':
                peer.setRemoteDescription(new RTCSessionDescription(messageData.sdp), function () {
                    console.log('Setting remote description by offer');
                    peer.createAnswer(function (sdp) {
                        peer.setLocalDescription(sdp);
                        self._socket.emit('msg', { by: self._currentId, to: messageData.by, sdp: sdp, type: 'sdp-answer' });
                    });
                });
                break;
            case 'sdp-answer':
                peer.setRemoteDescription(new RTCSessionDescription(messageData.sdp), function () {
                    console.log('Setting remote description by answer');
                }, function (e) {
                    console.error(e);
                });
                break;
            case 'ice':
                if (messageData.ice) {
                    console.log('Adding ice candidates... OK!');
                    console.log(messageData);
                    var cand = new RTCIceCandidate(messageData.ice);
                    peer.addIceCandidate(cand, function () { }, function () { });
                }
                break;
        }
    };
    RtcRoom.prototype.createRoom = function () {
        var _this = this;
        this._socket.emit('init', null, function (room, userId) {
            _this._currentId = userId;
            _this._roomId = room;
        });
    };
    RtcRoom.prototype.join = function () {
        var _this = this;
        this._socket.emit('init', { room: this._roomId }, function (room, userId) {
            _this._currentId = userId;
        });
    };
    RtcRoom.prototype.on = function (eventType, listener) {
        if (!this._eventMap[eventType])
            this._eventMap[eventType] = [];
        this._eventMap[eventType].push(listener);
    };
    RtcRoom.prototype.trigger = function (eventType, data) {
        this._eventMap[eventType].forEach(function (listener) {
            listener(data);
        });
    };
    RtcRoom.prototype.sendMessage = function (s) {
    };
    RtcRoom.ICE_CONFIG = {
        'iceServers': [{
                'url': 'stun:stun.l.google.com:19302'
            }]
    };
    return RtcRoom;
})();
exports.RtcRoom = RtcRoom;

//# sourceMappingURL=data:application/json;base64,