var RoomOptions_1 = require('./RoomOptions');
var StreamRoom_1 = require('./StreamRoom');
var RoomService = (function () {
    function RoomService(config) {
        this.config = config;
        this.socket = this.getSocket();
    }
    RoomService.prototype.findRooms = function (filter, callback) {
        if (filter == null) {
            console.warn("[RoomService] If you wanted all results, pass in an empty string. Fixing this for you this time...");
            filter = '';
        }
        this.socket.emit('findRooms', { filter: filter }, function (results) {
            var optionizedResults = [];
            results.forEach(function (room) {
                var roomOption = new RoomOptions_1.RoomOptions(room, false);
                optionizedResults.push(roomOption);
            });
            callback(optionizedResults);
        });
    };
    RoomService.prototype.createRoom = function (options, callback) {
        if (options == null || callback == null) {
            throw Error("Options or callback cannot be null.");
        }
        this.socket.emit('createRoom', options, function (success) {
            callback(success);
        });
    };
    RoomService.prototype.joinRoom = function (options, streams, callback) {
        if (options == null || streams == null) {
            callback(false);
        }
        var roomSocket = this.getSocket();
        roomSocket.emit('joinRoom', options, function (success, token) {
            if (success) {
                var context = new StreamRoom_1.StreamRoom(streams, options, roomSocket, token);
                callback(success, context);
            }
            else {
                callback(false, null);
            }
        });
    };
    RoomService.prototype.getSocket = function () {
        var socket = io.connect(this.config.url, { resource: 'A/socket.io', 'force new connection': true });
        return socket;
    };
    return RoomService;
})();
exports.RoomService = RoomService;

//# sourceMappingURL=data:application/json;base64,