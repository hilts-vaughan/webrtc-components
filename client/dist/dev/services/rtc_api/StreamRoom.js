var StreamPeer_1 = require('./StreamPeer');
var StreamRoom = (function () {
    function StreamRoom(localStreams, options, socket, sessionToken) {
        this._peerMap = {};
        this._channelMap = {};
        this._eventMap = {};
        this._localStreams = localStreams;
        this._roomOptions = options;
        this._socket = socket;
        this._sessionToken = sessionToken;
        var self = this;
        alert('reg');
        this._socket.on('msg', function (data) {
            console.log("Handling payload...");
            self.handleMessages(data);
        });
        this._socket.on('peer.connected', function (data) {
            self.makeOfferFor(data.id);
        });
        this._socket.on('peer.disconnected', function (data) {
            self.trigger('peer.removed', { id: data.id });
        });
    }
    StreamRoom.prototype.getPeerConnection = function (id) {
        if (this._peerMap[id]) {
            return this._peerMap[id];
        }
        var pc = new RTCPeerConnection(StreamRoom.ICE_CONFIG);
        var streamPeer = new StreamPeer_1.StreamPeer(pc, id);
        this._peerMap[id] = pc;
        var self = this;
        this._localStreams.forEach(function (stream) {
            pc.addStream(stream);
        });
        pc.onicecandidate = function (evnt) {
            console.log("ICE candidate recieved... broadcasting request");
            console.log(self._sessionToken);
            self._socket.emit('msg', { by: self._sessionToken, to: id, ice: evnt.candidate, type: 'ice' });
        };
        pc.onaddstream = function (event) {
            console.log("Got new stream.. inform UI?");
            self.trigger('newstream', event);
        };
        pc.onremovestream = function (event) {
            console.log("Stream lost");
        };
        var options = {
            ordered: false
        };
        var _channel = pc.createDataChannel("data", options);
        _channel.onopen = function () {
            console.log("Attempted to send data down the pipe.");
        };
        this._channelMap[id] = _channel;
        pc.ondatachannel = function (event) {
            console.log(event);
            console.log("Channel was created");
            event.channel.onmessage = function (payload) {
                self.trigger('data', payload.data);
            };
        };
        return pc;
    };
    StreamRoom.prototype.makeOfferFor = function (id) {
        var _this = this;
        var peer = this.getPeerConnection(id);
        peer.createOffer(function (description) {
            peer.setLocalDescription(description);
            console.log("Creating offer for Peer... ID: " + id);
            _this._socket.emit('msg', { by: _this._sessionToken, to: id, sdp: description, type: 'sdp-offer' });
        }, function () {
            alert('failed');
        });
    };
    StreamRoom.prototype.handleMessages = function (messageData) {
        var peer = this.getPeerConnection(messageData.by);
        var self = this;
        switch (messageData.type) {
            case 'sdp-offer':
                peer.setRemoteDescription(new RTCSessionDescription(messageData.sdp), function () {
                    console.log('Setting remote description by offer');
                    peer.createAnswer(function (sdp) {
                        peer.setLocalDescription(sdp);
                        self._socket.emit('msg', { by: self._sessionToken, to: messageData.by, sdp: sdp, type: 'sdp-answer' });
                    });
                }, function () {
                });
                break;
            case 'sdp-answer':
                peer.setRemoteDescription(new RTCSessionDescription(messageData.sdp), function () {
                    console.log('Setting remote description by answer');
                }, function (e) {
                    console.error(e);
                });
                break;
            case 'ice':
                if (messageData.ice) {
                    console.log('Adding ice candidates... OK!');
                    console.log(messageData);
                    var cand = new RTCIceCandidate(messageData.ice);
                    peer.addIceCandidate(cand, function () { }, function () { });
                }
                break;
        }
    };
    StreamRoom.prototype.sendMessage = function (message) {
        var _this = this;
        Object.keys(this._channelMap).forEach(function (key) {
            var channel = _this._channelMap[key];
            channel.send(message);
        });
    };
    StreamRoom.prototype.on = function (eventType, listener) {
        if (!this._eventMap[eventType])
            this._eventMap[eventType] = [];
        this._eventMap[eventType].push(listener);
    };
    StreamRoom.prototype.trigger = function (eventType, data) {
        console.log("Dispatching event; " + eventType + " to all listeners.");
        this._eventMap[eventType].forEach(function (listener) {
            listener(data);
        });
    };
    Object.defineProperty(StreamRoom.prototype, "roomName", {
        get: function () {
            return this._roomOptions.roomName;
        },
        enumerable: true,
        configurable: true
    });
    StreamRoom.ICE_CONFIG = {
        'iceServers': [{
                'url': 'stun:stun.l.google.com:19302'
            }]
    };
    return StreamRoom;
})();
exports.StreamRoom = StreamRoom;

//# sourceMappingURL=data:application/json;base64,