var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var angular2_1 = require('angular2/angular2');
var StreamController_1 = require('../../services/rtc_api/StreamController');
var ControllerConfiguration_1 = require('../../services/rtc_api/ControllerConfiguration');
var RoomOptions_1 = require('../../services/rtc_api/RoomOptions');
var StreamFactory_1 = require('../../services/rtc_api/StreamFactory');
var HomeCmp = (function () {
    function HomeCmp(ref) {
        this.ref = ref;
        this.chatBuffer = [];
        this.availableRooms = [];
        this.localStreams = [];
        this.state = 0;
        this._streamController = new StreamController_1.StreamController(new ControllerConfiguration_1.ControllerConfiguration("http://hopper.wlu.ca:1239/", "WLU-HOPPER"));
        this.refreshRooms();
    }
    HomeCmp.prototype.askWebcam = function () {
        var self = this;
        StreamFactory_1.StreamFactory.createWebcamStream(true, true, function (stream) {
            if (stream != null) {
                self.localStreams.push(URL.createObjectURL(stream));
                self.activeStream = stream;
                self.moveToChoice();
            }
        });
    };
    HomeCmp.prototype.askScreen = function () {
        var self = this;
        StreamFactory_1.StreamFactory.createScreenStream(function (stream) {
            if (stream != null) {
                self.localStreams.push(URL.createObjectURL(stream));
                self.activeStream = stream;
                self.moveToChoice();
            }
        });
    };
    HomeCmp.prototype.moveToChoice = function () {
        this.state = 1;
        this.ref.detectChanges();
    };
    HomeCmp.prototype.refreshRooms = function () {
        var _this = this;
        var self = this;
        this._streamController.getRoomService().findRooms("", function (roomsFound) {
            self.availableRooms = roomsFound;
            _this.ref.detectChanges();
        });
    };
    HomeCmp.prototype.createRoom = function () {
        var _this = this;
        var roomName = prompt("Name of the room to create; ");
        var options = new RoomOptions_1.RoomOptions(roomName, false);
        this._streamController.getRoomService().createRoom(options, function (success) {
            if (success) {
                alert("Room created!");
            }
            else {
                alert("Failed to create room. Duplicate?");
            }
            _this.refreshRooms();
        });
    };
    HomeCmp.prototype.joinRoom = function () {
        var _this = this;
        var roomName = prompt("Name of the room to join?");
        var options = new RoomOptions_1.RoomOptions(roomName, false);
        var self = this;
        this._streamController.getRoomService().joinRoom(options, [self.activeStream], function (success, roomContext) {
            if (success) {
                self.activeRoom = roomContext;
                self.state = 2;
                self.ref.detectChanges();
                self.moveToPeers();
                setTimeout(_this.beginPlayback.bind(_this), 500);
            }
            else {
                alert("Failed to join room!");
            }
        });
    };
    HomeCmp.prototype.moveToPeers = function () {
        this.activeRoom.on('newstream', this.setupRemoteStream.bind(this));
    };
    HomeCmp.prototype.setupRemoteStream = function (event) {
        this.localStreams.push(URL.createObjectURL(event.stream));
        this.ref.detectChanges();
        setTimeout(this.beginPlayback.bind(this), 500);
    };
    HomeCmp.prototype.beginPlayback = function () {
        var nodes = document.getElementsByTagName('video');
        for (var i = 0; i < nodes.length; i++) {
            nodes[i].play();
        }
    };
    HomeCmp = __decorate([
        angular2_1.Component({
            selector: 'home',
            template: "\n    <div id=\"start-state\">\n\n      <div *ng-if=\"state < 2\" class=\"centered\">\n        <h1 style=\"text-align: center;\">What would you like to do?</h1>\n\n        <div *ng-if=\"state == 1\" class=\"button-wrapper\">\n          <a (click)=\"joinRoom($event)\" class=\"btn\">Join Room</a>\n          <a (click)=\"createRoom($event)\" class=\"btn\">Create Room</a>\n          <a (click)=\"refreshRooms()\" class=\"btn\">Refresh Rooms</a>\n        </div>\n\n        <div *ng-if=\"state == 0\" class=\"stream-wrapper\">\n          <a (click)=\"askWebcam()\" class=\"btn\">Share Video & Audio</a>\n          <a (click)=\"askScreen()\" class=\"btn\">Share Screen</a>\n        </div>\n\n      </div>\n\n      <!--Video displays here-->\n      <div *ng-if=\"state == 2\">\n        <div *ng-for=\"#stream of localStreams\">\n          <video class=\"video-display\" src=\"{{stream}}\" autoplay=\"true\"></video>\n        </div>\n      </div>\n\n      <div *ng-if=\"state < 2\" class=\"room-list\">\n        <h2>Available Rooms</h1>\n        <div class=\"name-container\">\n          <div *ng-for=\"#room of availableRooms\" class=\"room-name\">{{room.roomName}}</div> \n        </div>\n     </div>  \n \n    </div>\n\n\n    <div id=\"chat-view\">\n      <div class=\"col-md-12\">\n        <div class=\"row\">\n          <div id=\"chat-sidebar\" class=\"col-sm-2\">\n            <ul>\n              <li *ng-for=\"#name of roomNames\">{{name}}</li>\n            </ul>\n            <form>\n            <input id=\"message-box\">\n            </form>\n            <button (click)=\"sendMessage($event)\">Send Message</button>        \n            <button (click)=\"createRoom($event)\">Create Room</button>\n            <button (click)=\"joinRoom($event)\">Join Room</button>\n        \n            <!--Message area-->\n            <div class=\"row\" *ng-for=\"#chatMessage of chatBuffer\">\n              <b>{{chatMessage}}</b>\n              </br> \n            </div>\n        \n          </div>\n          <div id=\"chat-main\" class=\"col-sm-10\">\n            <!--Video displays here-->\n            <div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    </div>\n  ",
            styles: ["\n    #start-state {\n    \tposition: absolute;\n    \theight: 100%;\n    \twidth: 100%;\n    \ttop: 0;\n    \tleft: 0;\n    \tbackground-color: black;\n    \tz-index: 500;\n    }\n\n    #start-state .centered {\n     \tposition: absolute;\n        top: 50%;\n        left: 50%;\n        width: 600px;\n        height: 300px;\n        margin-top: -150px;\n        margin-left: -300px;\n    }\n\n    #start-state .room-list {\n      position: absolute;\n      top: 0;\n      left: 0;\n      height: 100%;\n      width: 170px;\n      background-color: rgba(221, 160, 221, 0.05);\n    }\n\n    #start-state h2 {\n      font-size: 16px;\n      text-align: center;\n    }\n\n    #start-state .room-name {\n      font-weight: bold;\n      text-align: left;\n      padding-left: 4px;\n      margin-top: 5px;\n      font-size: 14px;\n      text-overflow: ellipsis;\n      color: white;\n    }\n\n    #start-state input {\n    \tborder-radius: 3px;\n    \tfont-size: 16px;\n    }\n\n    #start-state video {\n      width: 480px;\n      float: left;\n    }\n\n    .btn {\n      padding-top: 35px;\n      margin-top: 5px;\n      text-align: center;\n      display: block;\n    }\n\n    .btn {\n      background: #3498db;\n      background-image: -webkit-linear-gradient(top, #3498db, #2980b9);\n      background-image: -moz-linear-gradient(top, #3498db, #2980b9);\n      background-image: -ms-linear-gradient(top, #3498db, #2980b9);\n      background-image: -o-linear-gradient(top, #3498db, #2980b9);\n      background-image: linear-gradient(to bottom, #3498db, #2980b9);\n      -webkit-border-radius: 28;\n      -moz-border-radius: 28;\n      border-radius: 28px;\n      font-family: Arial;\n      color: #ffffff;\n      font-size: 14px;\n      padding: 10px 20px 10px 20px;\n      text-decoration: none;\n    }\n\n    .btn:hover {\n      background: #3cb0fd;\n      background-image: -webkit-linear-gradient(top, #3cb0fd, #3498db);\n      background-image: -moz-linear-gradient(top, #3cb0fd, #3498db);\n      background-image: -ms-linear-gradient(top, #3cb0fd, #3498db);\n      background-image: -o-linear-gradient(top, #3cb0fd, #3498db);\n      background-image: linear-gradient(to bottom, #3cb0fd, #3498db);\n      text-decoration: none;\n    }\n  "],
            directives: [angular2_1.CORE_DIRECTIVES]
        }), 
        __metadata('design:paramtypes', [angular2_1.ChangeDetectorRef])
    ], HomeCmp);
    return HomeCmp;
})();
exports.HomeCmp = HomeCmp;

//# sourceMappingURL=data:application/json;base64,